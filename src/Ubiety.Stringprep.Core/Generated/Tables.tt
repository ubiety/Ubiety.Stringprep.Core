<#@ template language="C#" hostspecific="true" #>
<#@ output extension="cs" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Linq"#>
<#@ assembly name="System.Core" #>
/* This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * For more information, please refer to <http://unlicense.org/>
 *
 * GENERATED - DO NOT MANUALLY EDIT
 */

using System;
using System.Collections.Generic;

namespace Ubiety.Stringprep.Core.Generated
{
    /// <summary>
    ///    Stringprep code tables.
    /// </summary>
    internal static class Tables
    {
<#
    var tables = File.Open(Host.ResolvePath(@"..\Resources\tables.txt"), FileMode.Open);

    using var reader = new StreamReader(tables);

    char? context = null;
    var tableName = "";
    string line;

    while ((line = reader.ReadLine()) != null)
    {
        if (string.IsNullOrWhiteSpace(line))
        {
            continue;
        }

        if (Regex.IsMatch(line, "^[A-D]\\.[1-9]"))
        {
            var parts = line.Split(new[] {' '}, 2, StringSplitOptions.None);
            tableName = parts[0].Replace(".", string.Empty);
            context = parts[0][0];

            OutputDocComment(line);
        }
        else if (Regex.IsMatch(line, "^----- End Table .*? -----$"))
        {
            OutputEndTable();
        }
        else if (Regex.IsMatch(line, "^----- Start Table .*? -----$"))
        {
            switch (context)
            {
                case 'A':
                case 'C':
                case 'D':
                    IntTable(tableName);
                    break;
                case 'B':
                    DictionaryTable(tableName);
                    break;
            }
        }
        else switch (context)
        {
            case 'A':
            case 'D':
                string first, last;
                if (line.IndexOf('-') > -1)
                {
                    var parts = line.Split('-');
                    first = parts[0];
                    last = parts[1];
                }
                else
                {
                    first = last = line;
                }
            
                Replacement(first, last);
                break;
            case 'B':
                DictionaryEntry(line);
                break;
            case 'C':
            {
                var parts = line.Split(';');
                var comment = parts[1];
                string start, end;

                if (parts[0].IndexOf('-') > -1)
                {
                    parts = parts[0].Split('-');
                    start = parts[0];
                    end = parts[1];
                }
                else
                {
                    start = end = parts[0];
                }
            
                Replacement(start, end, comment);
                break;
            }
        }
    }
#>
    }
}

<#+
    private void OutputDocComment(string comment)
    {
 #>
        /// <summary>
        ///     <#= comment #>.
        /// </summary>
<#+
    }
#>

<#+
    private void DictionaryTable(string name)
    {
 #>
        public static readonly Dictionary<int, int[]> <#= name #> = new ()
        {
<#+
    }
#>

<#+
    private void IntTable(string name)
    {
 #>
        public static readonly int[] <#= name #> =
        {
<#+
    }
#>

<#+
    private void Replacement(string start, string end, string comment = "")
    {
        if (string.IsNullOrEmpty(comment))
        {
 #>
            0x<#= start #>, 0x<#= end #>,
<#+
        }
        else
        {
#>
            0x<#= start #>, 0x<#= end #>, //<#= comment #>
<#+
        }
    }
#>

<#+
    private void DictionaryEntry(string line)
    {
        var parts = line.Split(';');
        var replacements = parts[1].Split(new[] {' '}, StringSplitOptions.RemoveEmptyEntries);

        if (!replacements.Any())
        {
#>
            { 0x<#= parts[0] #>, Array.Empty<int>() }, //<#= parts[2] #>
<#+
        }
        else
        {
#>
            { 0x<#= parts[0] #>, new[] { <#+ for (var i = 0; i < replacements.Length; i++) { #>0x<#= replacements[i] #>, <#+ } #>} }, //<#= parts[2]#>
<#+
        }
    }
#>

<#+
    private void OutputEndTable()
    {
#>
        };

<#+        
    }
#>